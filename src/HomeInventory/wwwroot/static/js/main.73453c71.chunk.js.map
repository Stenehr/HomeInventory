{"version":3,"sources":["app/api/index.js","app/stores/userStore.js","app/stores/store.js","app/stores/adminStore.js","app/stores/appStore.js","app/stores/inventoryStore.js","app/layout/NavBar.js","app/components/LoadingComponent.js","app/utils.js","app/features/inventory/ItemFilter.js","app/features/inventory/ListItem.js","app/features/inventory/ItemsDashboard.js","app/features/user/LoginForm.js","app/features/user/RegisterForm.js","app/layout/HomePage.js","app/layout/NotFound.js","app/features/inventory/ItemConditionForm.js","app/features/inventory/ItemLocationForm.js","app/features/inventory/ItemForm.js","app/features/inventory/ItemDetails.js","app/layout/UserRoute.js","app/layout/AdminRoute.js","app/features/admin/UserTotalItems.js","app/features/admin/UserTotalLocations.js","app/features/admin/UserItemsTotalWeight.js","app/features/admin/UserTotalItemsWithImagesCount.js","app/features/admin/AdminDashboard.js","app/layout/ServerError.js","app/layout/App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","store","userStore","headers","Authorization","response","error","data","status","errors","errorMessage","Object","keys","map","key","alert","join","history","push","getData","requests","url","get","then","body","post","put","accountEndpoint","account","login","loginDto","register","registerDto","getUser","inventoryEndpoint","inventory","getAll","searchParams","params","id","create","itemFormData","edit","itemLocationEndpoint","itemLocation","itemLocationDto","itemConditionEndpoit","adminStatisticsEndpoint","api","admin","getUserTotalItem","getUserTotalLocations","getUserItemsTotalWeight","getUserTotalItemsWithImagesCount","itemCondition","jwtKey","UserStore","user","window","localStorage","getItem","userLoading","a","setUser","isAdmin","logout","runInAction","makeAutoObservable","this","reaction","setItem","removeItem","location","reload","isLoggedIn","adminStore","userTotalItems","userTotalLocations","userItemsTotalWeight","userTotalItemsWithImagesCount","loading","loadUserTotalItems","result","console","log","loadUserTotalLocations","loadUserItemsTotalWeight","loadUserTotalItemsWithImagesCount","appStore","appLoaded","setAppLoaded","inventoryStore","items","selectedItem","itemLocations","itemConditions","itemLoading","itemLocationsLoaded","itemConditionsLoaded","loadItems","filter","createUrlParams","URLSearchParams","forEach","filterValue","append","loadItemLocations","getItemLocation","find","x","createItemLocation","loadItemConditions","createItemCondition","itemConditionDto","createItem","itemDto","formData","createFormData","updateItem","index","i","indexOf","splice","FormData","value","undefined","loadSelectedItem","Number","item","StoreContext","createContext","useStore","useContext","NavBar","isRegularUser","useHistory","Menu","fixed","Container","Item","as","Link","to","header","Button","positive","content","position","onClick","icon","LoadingComponent","Loader","active","inline","getFormikErrors","formik","fieldName","fieldMeta","getFieldMeta","touched","base64ImageStringToImageSrc","base64image","mimeType","mapItemClassifierToSelectItem","classifier","textKey","text","handleFloatKeyPress","event","test","preventDefault","target","includes","observer","getBaseState","name","serialNumber","description","itemLocationId","itemConditionId","weightHeavierThen","weightLighterThen","useState","setFilter","itemLocationSelectItems","setItemLocationSelectItems","itemConditionSelectItems","setItemConditionSelectItems","handleChange","_","useEffect","mapItemLocations","mapItemConditions","Form","Group","widths","Input","label","onChange","onKeyPress","Select","width","placeholder","options","type","disabled","ListItem","Card","imageDto","Image","src","base64Image","wrapped","ui","Content","Header","Meta","Description","weight","condition","extra","floated","Segment","Grid","Column","computer","mobile","handleBackClick","setErrorMessage","useFormik","initialValues","userName","password","onSubmit","values","catch","validationSchema","yup","min","required","handleSubmit","isSubmitting","autoComplete","autoFocus","Message","passwordConfirm","oneOf","loginOpen","registerOpen","formState","setFormState","centered","style","marginTop","Row","textAlign","tablet","padded","NotFound","handleAfterSubmit","addedCondition","handleCloseForm","isLevelAdding","parentLocationId","setParentLocationId","locationNames","setLocationNames","addedLocation","setFieldValue","setTouched","length","Field","useParams","image","removeImage","addNewItemLocation","setAddNewItemLocation","addNewLocationLevel","setAddNewLocationLevel","addNewItemCondition","setAddNewItemCondition","previewImageSrc","setPreviewImageSrc","fileName","setFileName","fileRef","useRef","enableReinitialize","dto","toString","replace","typeError","TextArea","marginBottom","color","addedItemLocation","size","current","Icon","click","hidden","ref","file","files","URL","createObjectURL","List","Component","component","rest","render","props","Table","celled","HeaderCell","Body","userTotalItem","Cell","itemCount","userTotalLocation","locationCount","userItemTotalWeight","userItemImagesCount","imageCount","userTotalItemsMenu","userTotalLocationsMenu","activeMenu","setActiveMenu","pointing","secondary","ServerError","appException","useLocation","state","statusCode","message","details","finally","exact","path","HomePage","UserRoute","ItemsDashboard","ItemDetails","ItemForm","AdminDashboard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.73453c71.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { store } from '../stores/store';\r\nimport { history } from '../../index';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.userStore.token;\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        const data = error.data;\r\n        const status = error.status;\r\n        switch (status) {\r\n            case 400:\r\n                const { errors } = data;\r\n                if (errors) {\r\n                    const errorMessage = Object.keys(errors).map(key => {\r\n                        return errors[key][0];\r\n                    });\r\n                    alert(errorMessage.join(','));\r\n                } else {\r\n                    alert(data);\r\n                }\r\n                break;\r\n            case 404:\r\n                history.push('/not-found');\r\n                break;\r\n            case 500:\r\n                history.push('/server-error', data);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n);\r\n\r\nconst getData = response => response?.data;\r\n\r\nconst requests = {\r\n    get: url => axios.get(url).then(getData),\r\n    post: (url, body) => axios.post(url, body).then(getData),\r\n    put: (url, body) => axios.put(url, body).then(getData),\r\n    delete: url => axios.delete(url).then(getData)\r\n};\r\n\r\nconst accountEndpoint = '/account';\r\nconst account = {\r\n    login: loginDto => requests.post(`${accountEndpoint}/login`, loginDto),\r\n    register: registerDto =>\r\n        requests.post(`${accountEndpoint}/register`, registerDto),\r\n    getUser: () => requests.get(accountEndpoint)\r\n};\r\n\r\nconst inventoryEndpoint = '/inventory';\r\nconst inventory = {\r\n    getAll: searchParams =>\r\n        axios.get(inventoryEndpoint, { params: searchParams }).then(getData),\r\n    get: id => requests.get(`${inventoryEndpoint}/${id}`),\r\n    create: itemFormData => requests.post(inventoryEndpoint, itemFormData),\r\n    edit: (id, itemFormData) =>\r\n        requests.put(`${inventoryEndpoint}/${id}`, itemFormData)\r\n};\r\n\r\nconst itemLocationEndpoint = `${inventoryEndpoint}/item-location`;\r\nconst itemLocation = {\r\n    getAll: () => requests.get(itemLocationEndpoint),\r\n    create: itemLocationDto =>\r\n        requests.post(itemLocationEndpoint, itemLocationDto)\r\n};\r\n\r\nconst itemConditionEndpoit = `${inventoryEndpoint}/item-condition`;\r\nconst itemCondition = {\r\n    getAll: () => requests.get(itemConditionEndpoit),\r\n    create: itemLocationDto =>\r\n        requests.post(itemConditionEndpoit, itemLocationDto)\r\n};\r\n\r\nconst adminStatisticsEndpoint = '/admin/statistics';\r\nconst admin = {\r\n    getUserTotalItem: () =>\r\n        requests.get(`${adminStatisticsEndpoint}/user-total-items`),\r\n    getUserTotalLocations: () =>\r\n        requests.get(`${adminStatisticsEndpoint}/user-total-added-locations`),\r\n    getUserItemsTotalWeight: () =>\r\n        requests.get(`${adminStatisticsEndpoint}/user-total-items-weight`),\r\n    getUserTotalItemsWithImagesCount: () =>\r\n        requests.get(\r\n            `${adminStatisticsEndpoint}/user-total-items-with-images-count`\r\n        )\r\n};\r\n\r\nconst api = {\r\n    admin,\r\n    account,\r\n    inventory,\r\n    itemLocation,\r\n    itemCondition\r\n};\r\n\r\nexport default api;\r\n","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport api from '../api';\r\nimport { history } from '../..';\r\n\r\nconst jwtKey = 'jwt';\r\n\r\nexport default class UserStore {\r\n    user = null;\r\n    token = window.localStorage.getItem(jwtKey);\r\n    userLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem(jwtKey, token);\r\n                } else {\r\n                    window.localStorage.removeItem(jwtKey);\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    get isAdmin() {\r\n        return this.isLoggedIn && this.user.isAdmin;\r\n    }\r\n\r\n    get isRegularUser() {\r\n        return this.isLoggedIn && !this.user.isAdmin;\r\n    }\r\n\r\n    login = async loginDto => {\r\n        try {\r\n            const user = await api.account.login(loginDto);\r\n            this.setUser(user);\r\n            if (user.isAdmin) {\r\n                history.push('/admin');\r\n            } else {\r\n                history.push('/items');\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        this.user = null;\r\n        this.token = null;\r\n    };\r\n\r\n    register = async registerDto => {\r\n        try {\r\n            const user = await api.account.register(registerDto);\r\n            this.setUser(user);\r\n            history.push('/items');\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    getUser = async () => {\r\n        this.userLoading = true;\r\n        try {\r\n            const user = await api.account.getUser();\r\n            runInAction(() => {\r\n                this.user = { ...user, token: this.token };\r\n            });\r\n        } finally {\r\n            this.userLoading = false;\r\n        }\r\n    };\r\n\r\n    setUser = user => {\r\n        this.user = user;\r\n        this.token = user.token;\r\n    };\r\n}\r\n","import { createContext, useContext } from 'react';\r\nimport AdminStore from './adminStore';\r\nimport AppStore from './appStore';\r\nimport InventoryStore from './inventoryStore';\r\nimport UserStore from './userStore';\r\n\r\nexport const store = {\r\n    adminStore: new AdminStore(),\r\n    appStore: new AppStore(),\r\n    userStore: new UserStore(),\r\n    inventoryStore: new InventoryStore()\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable, runInAction } from 'mobx';\r\nimport api from '../api';\r\n\r\nexport default class AdminStore {\r\n    userTotalItems = [];\r\n    userTotalLocations = [];\r\n    userItemsTotalWeight = [];\r\n    userTotalItemsWithImagesCount = [];\r\n    loading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    loadUserTotalItems = async () => {\r\n        this.loading = true;\r\n        try {\r\n            const result = await api.admin.getUserTotalItem();\r\n            runInAction(() => (this.userTotalItems = result));\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    loadUserTotalLocations = async () => {\r\n        this.loading = true;\r\n        try {\r\n            const result = await api.admin.getUserTotalLocations();\r\n            runInAction(() => (this.userTotalLocations = result));\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    loadUserItemsTotalWeight = async () => {\r\n        this.loading = true;\r\n        try {\r\n            const result = await api.admin.getUserItemsTotalWeight();\r\n            runInAction(() => (this.userItemsTotalWeight = result));\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    loadUserTotalItemsWithImagesCount = async () => {\r\n        this.loading = true;\r\n        try {\r\n            const result = await api.admin.getUserTotalItemsWithImagesCount();\r\n            runInAction(() => (this.userTotalItemsWithImagesCount = result));\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n}\r\n","import { makeAutoObservable } from 'mobx';\r\n\r\nexport default class AppStore {\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    };\r\n}\r\n","import { makeAutoObservable, runInAction } from 'mobx';\r\nimport api from '../api';\r\n\r\nexport default class InventoryStore {\r\n    items = [];\r\n    selectedItem = null;\r\n    itemLocations = [];\r\n    itemConditions = [];\r\n    itemLoading = false;\r\n    itemLocationsLoaded = false;\r\n    itemConditionsLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    loadItems = async filter => {\r\n        this.itemLoading = true;\r\n        try {\r\n            const result = await api.inventory.getAll(\r\n                this.createUrlParams(filter)\r\n            );\r\n\r\n            runInAction(() => {\r\n                this.items = result;\r\n            });\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        } finally {\r\n            runInAction(() => (this.itemLoading = false));\r\n        }\r\n    };\r\n\r\n    createUrlParams = filter => {\r\n        const searchParams = new URLSearchParams();\r\n        Object.keys(filter ?? {}).forEach(key => {\r\n            const filterValue = filter[key];\r\n            if (filterValue) {\r\n                searchParams.append(key, filterValue);\r\n            }\r\n        });\r\n\r\n        return searchParams;\r\n    };\r\n\r\n    loadItemLocations = async () => {\r\n        try {\r\n            const itemLocations = await api.itemLocation.getAll();\r\n            runInAction(() => {\r\n                this.itemLocations = itemLocations;\r\n                this.itemLocationsLoaded = true;\r\n            });\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    };\r\n\r\n    getItemLocation = id => {\r\n        return this.itemLocations.find(x => x.id === id);\r\n    };\r\n\r\n    createItemLocation = async itemLocationDto => {\r\n        try {\r\n            const itemLocation = await api.itemLocation.create(itemLocationDto);\r\n            runInAction(() => {\r\n                this.itemLocationsLoaded = false;\r\n            });\r\n\r\n            return itemLocation;\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    };\r\n\r\n    loadItemConditions = async () => {\r\n        try {\r\n            const itemConditions = await api.itemCondition.getAll();\r\n            runInAction(() => {\r\n                this.itemConditions = itemConditions;\r\n                this.itemConditionsLoaded = true;\r\n            });\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    };\r\n\r\n    createItemCondition = async itemConditionDto => {\r\n        try {\r\n            const itemCondition = await api.itemCondition.create(\r\n                itemConditionDto\r\n            );\r\n            runInAction(() => {\r\n                this.itemConditionsLoaded = false;\r\n            });\r\n\r\n            return itemCondition;\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    };\r\n\r\n    createItem = async itemDto => {\r\n        try {\r\n            const formData = this.createFormData(itemDto);\r\n            const result = await api.inventory.create(formData);\r\n            runInAction(() => {\r\n                this.items.push(result);\r\n                this.selectedItem = result;\r\n            });\r\n            return result;\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    };\r\n\r\n    updateItem = async (id, itemDto) => {\r\n        try {\r\n            const formData = this.createFormData(itemDto);\r\n            const result = await api.inventory.edit(id, formData);\r\n            runInAction(() => {\r\n                const index = this.items.map(i => i.id).indexOf(id);\r\n                this.items.splice(index, 1, result);\r\n                this.selectedItem = result;\r\n            });\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    };\r\n\r\n    createFormData = itemDto => {\r\n        const formData = new FormData();\r\n        Object.keys(itemDto).forEach(key => {\r\n            let value = itemDto[key];\r\n            if (value === undefined || value === null) {\r\n                formData.append(key, '');\r\n            } else {\r\n                formData.append(key, value);\r\n            }\r\n        });\r\n\r\n        return formData;\r\n    };\r\n\r\n    loadSelectedItem = async id => {\r\n        this.itemLoading = true;\r\n        try {\r\n            const item =\r\n                this.items.find(i => i.id === Number(id)) ??\r\n                (await api.inventory.get(id));\r\n            runInAction(() => (this.selectedItem = item));\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        } finally {\r\n            runInAction(() => (this.itemLoading = false));\r\n        }\r\n    };\r\n}\r\n","import { useHistory } from 'react-router';\r\nimport { Button, Container, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NavBar() {\r\n    const {\r\n        userStore: { logout, isAdmin, isRegularUser }\r\n    } = useStore();\r\n    const history = useHistory();\r\n\r\n    function handleLogout() {\r\n        logout();\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Menu fixed=\"top\">\r\n            <Container>\r\n                {isAdmin && (\r\n                    <Menu.Item as={Link} to=\"/admin\" header>\r\n                        Admin\r\n                    </Menu.Item>\r\n                )}\r\n                {isRegularUser && (\r\n                    <Menu.Item as={Link} to=\"/items\" header>\r\n                        Minu asjad\r\n                    </Menu.Item>\r\n                )}\r\n                {isRegularUser && (\r\n                    <Menu.Item>\r\n                        <Button\r\n                            positive\r\n                            content=\"Lisa ese\"\r\n                            as={Link}\r\n                            to=\"/add-item\"\r\n                        />\r\n                    </Menu.Item>\r\n                )}\r\n                <Menu.Item position=\"right\">\r\n                    <Button\r\n                        onClick={handleLogout}\r\n                        content=\"Logi välja\"\r\n                        icon=\"power\"\r\n                    />\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n}\r\n","import { Loader } from 'semantic-ui-react';\r\n\r\nexport default function LoadingComponent() {\r\n    return <Loader active inline=\"centered\" />;\r\n}\r\n","export default function getFormikErrors(formik, fieldName) {\r\n    const fieldMeta = formik.getFieldMeta(fieldName);\r\n    return fieldMeta.touched && fieldMeta.error;\r\n}\r\n\r\nexport function base64ImageStringToImageSrc(base64image, mimeType) {\r\n    return `data:${mimeType};base64,${base64image}`;\r\n}\r\n\r\nexport function mapItemClassifierToSelectItem(classifier, textKey) {\r\n    return {\r\n        key: classifier.id,\r\n        value: classifier.id,\r\n        text: classifier[textKey]\r\n    };\r\n}\r\n\r\nexport function handleFloatKeyPress(event) {\r\n    if (!/^\\d*\\.?\\d?$/g.test(event.key)) {\r\n        event.preventDefault();\r\n    }\r\n    if (event.key === '.' && event.target.value.includes('.')) {\r\n        event.preventDefault();\r\n    }\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\nimport {\r\n    handleFloatKeyPress,\r\n    mapItemClassifierToSelectItem\r\n} from '../../utils';\r\n\r\nexport default observer(function ItemFilter() {\r\n    const {\r\n        inventoryStore: {\r\n            loadItems,\r\n            itemLoading,\r\n            itemLocations,\r\n            itemLocationsLoaded,\r\n            loadItemLocations,\r\n            itemConditions,\r\n            loadItemConditions,\r\n            itemConditionsLoaded\r\n        }\r\n    } = useStore();\r\n\r\n    function getBaseState() {\r\n        return {\r\n            name: '',\r\n            serialNumber: '',\r\n            description: '',\r\n            itemLocationId: null,\r\n            itemConditionId: null,\r\n            weightHeavierThen: null,\r\n            weightLighterThen: null\r\n        };\r\n    }\r\n\r\n    const [filter, setFilter] = useState(getBaseState);\r\n    const [itemLocationSelectItems, setItemLocationSelectItems] = useState([]);\r\n    const [itemConditionSelectItems, setItemConditionSelectItems] = useState(\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        loadItems(filter);\r\n    }, [filter, loadItems]);\r\n\r\n    useEffect(() => {\r\n        function mapItemLocations() {\r\n            setItemLocationSelectItems([\r\n                { key: 0, value: undefined, text: '---vali---' },\r\n                ...itemLocations.map(x =>\r\n                    mapItemClassifierToSelectItem(x, 'name')\r\n                )\r\n            ]);\r\n        }\r\n\r\n        if (!itemLocationsLoaded) {\r\n            loadItemLocations().then(mapItemLocations);\r\n        } else {\r\n            mapItemLocations();\r\n        }\r\n    }, [itemLocations, loadItemLocations, itemLocationsLoaded]);\r\n\r\n    useEffect(() => {\r\n        function mapItemConditions() {\r\n            setItemConditionSelectItems([\r\n                { key: 0, value: undefined, text: '---vali---' },\r\n                ...itemConditions.map(x =>\r\n                    mapItemClassifierToSelectItem(x, 'condition')\r\n                )\r\n            ]);\r\n        }\r\n\r\n        if (!itemConditionsLoaded) {\r\n            loadItemConditions().then(mapItemConditions);\r\n        } else {\r\n            mapItemConditions();\r\n        }\r\n    }, [itemConditions, loadItemConditions, itemConditionsLoaded]);\r\n\r\n    function handleChange(_, { name, value }) {\r\n        setFilter({\r\n            ...filter,\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <Form.Group widths=\"equal\">\r\n                <Form.Input\r\n                    name=\"name\"\r\n                    label=\"Nimi\"\r\n                    value={filter.name}\r\n                    onChange={handleChange}\r\n                />\r\n                <Form.Input\r\n                    name=\"serialNumber\"\r\n                    label=\"Seerianumber\"\r\n                    value={filter.serialNumber}\r\n                    onChange={handleChange}\r\n                />\r\n                <Form.Input\r\n                    name=\"description\"\r\n                    label=\"Kirjeldus\"\r\n                    value={filter.description}\r\n                    onChange={handleChange}\r\n                />\r\n                <Form.Input\r\n                    name=\"weightHeavierThen\"\r\n                    label=\"Kaal raskem, kui (kg)\"\r\n                    onKeyPress={handleFloatKeyPress}\r\n                    onChange={handleChange}\r\n                    value={filter.weightHeavierThen}\r\n                />\r\n                <Form.Input\r\n                    name=\"weightLighterThen\"\r\n                    label=\"Kaal kergem, kui (kg)\"\r\n                    onKeyPress={handleFloatKeyPress}\r\n                    onChange={handleChange}\r\n                    value={filter.weightLighterThen}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Form.Select\r\n                    width=\"10\"\r\n                    name=\"itemLocationId\"\r\n                    label=\"Vali asukoht\"\r\n                    placeholder=\"Vali asukoht...\"\r\n                    options={itemLocationSelectItems}\r\n                    value={filter.itemLocationId}\r\n                    onChange={handleChange}\r\n                />\r\n                <Form.Select\r\n                    width=\"6\"\r\n                    name=\"itemConditionId\"\r\n                    label=\"Vali seisukord\"\r\n                    placeholder=\"Vali seisukord...\"\r\n                    options={itemConditionSelectItems}\r\n                    value={filter.itemConditionId}\r\n                    onChange={handleChange}\r\n                />\r\n            </Form.Group>\r\n            <Button\r\n                type=\"button\"\r\n                onClick={() => setFilter(getBaseState())}\r\n                content=\"Tühjenda\"\r\n                disabled={itemLoading}\r\n            />\r\n        </Form>\r\n    );\r\n});\r\n","import { Link } from 'react-router-dom';\r\nimport { Button, Card, Image } from 'semantic-ui-react';\r\nimport { base64ImageStringToImageSrc } from '../../utils';\r\n\r\nexport default function ListItem({ item }) {\r\n    return (\r\n        <Card>\r\n            {item.imageDto && (\r\n                <Image\r\n                    src={base64ImageStringToImageSrc(\r\n                        item.imageDto.base64Image,\r\n                        item.imageDto.mimeType\r\n                    )}\r\n                    wrapped\r\n                    ui={false}\r\n                />\r\n            )}\r\n            <Card.Content>\r\n                <Card.Header>{item.name}</Card.Header>\r\n                <Card.Meta></Card.Meta>\r\n                <Card.Description>\r\n                    <p>Asukoht: {item.itemLocation.name}</p>\r\n                    <p>Seerianumber: {item.serialNumber}</p>\r\n                    <p>Kaal: {item.weight ? `${item.weight} kg` : ''}</p>\r\n                    <p>Seisukord: {item.itemCondition?.condition}</p>\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Button\r\n                    floated=\"right\"\r\n                    content=\"Detailid\"\r\n                    as={Link}\r\n                    to={`/details/${item.id}`}\r\n                />\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Grid, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../components/LoadingComponent';\r\nimport { useStore } from '../../stores/store';\r\nimport ItemFilter from './ItemFilter';\r\nimport ListItem from './ListItem';\r\n\r\nexport default observer(function ItemList() {\r\n    const {\r\n        inventoryStore: { items, loadItems, itemLoading }\r\n    } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadItems();\r\n    }, [loadItems]);\r\n\r\n    return (\r\n        <>\r\n            <Segment>\r\n                <ItemFilter />\r\n            </Segment>\r\n            <Grid>\r\n                {itemLoading ? (\r\n                    <LoadingComponent />\r\n                ) : (\r\n                    items?.map(item => (\r\n                        <Grid.Column key={item?.id} computer=\"4\" mobile=\"16\">\r\n                            <ListItem item={item} />\r\n                        </Grid.Column>\r\n                    ))\r\n                )}\r\n            </Grid>\r\n        </>\r\n    );\r\n});\r\n","import { useFormik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Form, Message } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\nimport * as yup from 'yup';\r\nimport { useState } from 'react';\r\nimport getFormikErrors from '../../utils';\r\n\r\nexport default observer(function LoginForm({ handleBackClick }) {\r\n    const { userStore } = useStore();\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            userName: '',\r\n            password: ''\r\n        },\r\n        onSubmit: values =>\r\n            userStore.login(values).catch(() => {\r\n                setErrorMessage('Vale kasutajanimi või parool');\r\n            }),\r\n        validationSchema: yup.object({\r\n            userName: yup\r\n                .string()\r\n                .min(4, 'Kasutajanimi peab olema vähemalt 4 tähemärki')\r\n                .required('Kasutajanimi on kohustuslik'),\r\n            password: yup\r\n                .string()\r\n                .min(4, 'Parool peab olema vähemalt 4 tähemärki')\r\n                .required('Parool on kohustuslik')\r\n        })\r\n    });\r\n\r\n    return (\r\n        <Form\r\n            error={!!errorMessage}\r\n            onSubmit={formik.handleSubmit}\r\n            loading={formik.isSubmitting}\r\n            autoComplete=\"off\"\r\n        >\r\n            <Form.Input\r\n                name=\"userName\"\r\n                label=\"Kasutajanimi\"\r\n                autoFocus\r\n                onChange={formik.handleChange}\r\n                value={formik.values.userName}\r\n                error={getFormikErrors(formik, 'userName')}\r\n            />\r\n            <Form.Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                label=\"Parool\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n                error={getFormikErrors(formik, 'password')}\r\n            />\r\n            <Message error content={errorMessage} />\r\n            <Button type=\"submit\" positive content=\"Logi sisse\" />\r\n            <Button content=\"Tagasi\" onClick={handleBackClick} />\r\n        </Form>\r\n    );\r\n});\r\n","import { useFormik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Form, Message } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\nimport * as yup from 'yup';\r\nimport { useState } from 'react';\r\nimport getFormikErrors from '../../utils';\r\n\r\nexport default observer(function RegisterForm({ handleBackClick }) {\r\n    const { userStore } = useStore();\r\n\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            userName: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        onSubmit: values =>\r\n            userStore.register(values).catch(error => {\r\n                const { data } = error.response;\r\n                setErrorMessage(data);\r\n            }),\r\n        validationSchema: yup.object({\r\n            userName: yup\r\n                .string()\r\n                .min(4, 'Kasutajanimi peab olema vähemalt 4 tähemärki')\r\n                .required('Kasutajanimi on kohustuslik'),\r\n            password: yup\r\n                .string()\r\n                .min(4, 'Parool peab olema vähemalt 4 tähemärki')\r\n                .required('Parool on kohustuslik'),\r\n            passwordConfirm: yup\r\n                .string()\r\n                .oneOf([yup.ref('password')], 'Paroolid ei ühti')\r\n        })\r\n    });\r\n\r\n    return (\r\n        <Form\r\n            error={!!errorMessage}\r\n            onSubmit={formik.handleSubmit}\r\n            loading={formik.isSubmitting}\r\n            autoComplete=\"off\"\r\n        >\r\n            <Form.Input\r\n                name=\"userName\"\r\n                label=\"Kasutajanimi\"\r\n                autoFocus\r\n                onChange={formik.handleChange}\r\n                value={formik.values.userName}\r\n                error={getFormikErrors(formik, 'userName')}\r\n            />\r\n            <Form.Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                label=\"Parool\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n                error={getFormikErrors(formik, 'password')}\r\n            />\r\n            <Form.Input\r\n                type=\"password\"\r\n                name=\"passwordConfirm\"\r\n                label=\"Korda parooli\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.passwordConfirm}\r\n                error={getFormikErrors(formik, 'passwordConfirm')}\r\n            />\r\n            <Message error content={errorMessage} />\r\n            <Button type=\"submit\" positive content=\"Registreeri\" />\r\n            <Button content=\"Tagasi\" onClick={handleBackClick} />\r\n        </Form>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useState } from 'react';\r\nimport { Button, Grid, Header, Segment } from 'semantic-ui-react';\r\nimport LoginForm from '../features/user/LoginForm';\r\nimport RegisterForm from '../features/user/RegisterForm';\r\nimport { useStore } from '../stores/store';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst loginOpen = 'loginOpen';\r\nconst registerOpen = 'registerOpen';\r\n\r\nexport default observer(function HomePage() {\r\n    const [formState, setFormState] = useState(null);\r\n\r\n    const history = useHistory();\r\n    const {\r\n        userStore: { isAdmin, isRegularUser }\r\n    } = useStore();\r\n\r\n    function handleBackClick() {\r\n        setFormState(null);\r\n    }\r\n\r\n    if (isRegularUser) {\r\n        history.push('/items');\r\n    }\r\n\r\n    if (isAdmin) {\r\n        history.push('/admin');\r\n    }\r\n\r\n    return (\r\n        <Grid centered style={{ marginTop: '5em' }}>\r\n            <Grid.Row centered>\r\n                <Grid.Column textAlign=\"center\">\r\n                    <Header as=\"h1\">Minu asjad</Header>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column computer=\"6\" tablet=\"10\" mobile=\"16\">\r\n                    <Segment padded>\r\n                        {!formState && (\r\n                            <Grid centered>\r\n                                <Button\r\n                                    content=\"Logi sisse\"\r\n                                    onClick={() => setFormState(loginOpen)}\r\n                                />\r\n                                <Button\r\n                                    content=\"Registreeri\"\r\n                                    onClick={() => setFormState(registerOpen)}\r\n                                />\r\n                            </Grid>\r\n                        )}\r\n                        {formState === loginOpen && (\r\n                            <LoginForm handleBackClick={handleBackClick} />\r\n                        )}\r\n                        {formState === registerOpen && (\r\n                            <RegisterForm handleBackClick={handleBackClick} />\r\n                        )}\r\n                    </Segment>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n});\r\n","import { Grid, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Grid centered>\r\n            <Grid.Column computer='8' tablet='16'>\r\n                <Segment>\r\n                    Kahjuks me ei leidnud ressurssi, mida otsisite.\r\n                </Segment>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { useFormik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Form, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\nimport * as yup from 'yup';\r\nimport getFormikErrors from '../../utils';\r\n\r\nexport default observer(function ItemConditionForm({ handleAfterSubmit }) {\r\n    const {\r\n        inventoryStore: { createItemCondition }\r\n    } = useStore();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            condition: ''\r\n        },\r\n        onSubmit: async values => {\r\n            const addedCondition = await createItemCondition(values);\r\n\r\n            handleAfterSubmit(addedCondition);\r\n        },\r\n        validationSchema: yup.object({\r\n            condition: yup.string().required('Seiskord on kohustuslik')\r\n        })\r\n    });\r\n\r\n    return (\r\n        <Segment loading={formik.isSubmitting}>\r\n            <Form.Input\r\n                autoFocus\r\n                name=\"condition\"\r\n                label=\"Seisukord\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.name}\r\n                error={getFormikErrors(formik, 'name')}\r\n            />\r\n            <Button\r\n                type=\"button\"\r\n                onClick={formik.handleSubmit}\r\n                positive\r\n                content=\"Lisa seisukord\"\r\n            />\r\n        </Segment>\r\n    );\r\n});\r\n","import { useFormik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Form, Header, Input, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\nimport * as yup from 'yup';\r\nimport getFormikErrors from '../../utils';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport default observer(function ItemLocationForm({\r\n    handleAfterSubmit,\r\n    handleCloseForm,\r\n    itemLocation,\r\n    isLevelAdding\r\n}) {\r\n    const {\r\n        inventoryStore: { createItemLocation }\r\n    } = useStore();\r\n\r\n    const [parentLocationId, setParentLocationId] = useState(null);\r\n    const [locationNames, setLocationNames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (itemLocation && isLevelAdding) {\r\n            setLocationNames([itemLocation.name]);\r\n            setParentLocationId(itemLocation.id);\r\n        } else {\r\n            setLocationNames([]);\r\n            setParentLocationId(null);\r\n        }\r\n    }, [itemLocation, isLevelAdding]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: ''\r\n        },\r\n        onSubmit: async values => {\r\n            const addedLocation = await createItemLocation({\r\n                ...values,\r\n                parentLocationId\r\n            });\r\n            setLocationNames([...locationNames, addedLocation.name]);\r\n            setParentLocationId(addedLocation.id);\r\n            formik.setFieldValue('name', '');\r\n            formik.setTouched(false);\r\n\r\n            if (locationNames.length > 0) {\r\n                addedLocation.name = `${locationNames.join('/')}/${\r\n                    addedLocation.name\r\n                }`;\r\n            }\r\n\r\n            handleAfterSubmit(addedLocation);\r\n        },\r\n        validationSchema: yup.object({\r\n            name: yup.string().required('Nimi on kohustuslik')\r\n        })\r\n    });\r\n\r\n    return (\r\n        <Segment loading={formik.isSubmitting}>\r\n            <Header as=\"h4\">\r\n                {parentLocationId ? 'Täpsusta asukoht' : 'Lisa uus asukoht'}\r\n            </Header>\r\n            <Form.Field inline error={getFormikErrors(formik, 'name')}>\r\n                <label>{locationNames.join('/')}/</label>\r\n                <Input\r\n                    autoFocus\r\n                    name=\"name\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.name}\r\n                />\r\n            </Form.Field>\r\n            <Button\r\n                type=\"button\"\r\n                onClick={formik.handleSubmit}\r\n                positive\r\n                content=\"Salvesta\"\r\n            />\r\n            <Button type=\"button\" onClick={handleCloseForm} content=\"Valmis\" />\r\n        </Segment>\r\n    );\r\n});\r\n","import { useFormik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Form, Grid, Icon, Image, Segment } from 'semantic-ui-react';\r\nimport * as yup from 'yup';\r\nimport { useStore } from '../../stores/store';\r\nimport getFormikErrors, {\r\n    base64ImageStringToImageSrc,\r\n    handleFloatKeyPress,\r\n    mapItemClassifierToSelectItem\r\n} from '../../utils';\r\nimport ItemConditionForm from './ItemConditionForm';\r\nimport ItemLocationForm from './ItemLocationForm';\r\n\r\nexport default observer(function ItemForm() {\r\n    const {\r\n        inventoryStore: {\r\n            selectedItem,\r\n            loadSelectedItem,\r\n            itemLocations,\r\n            loadItemLocations,\r\n            itemLocationsLoaded,\r\n            createItem,\r\n            updateItem,\r\n            getItemLocation,\r\n            itemConditions,\r\n            loadItemConditions,\r\n            itemConditionsLoaded\r\n        }\r\n    } = useStore();\r\n\r\n    const { id } = useParams();\r\n    const history = useHistory();\r\n\r\n    const [item, setItem] = useState({\r\n        name: '',\r\n        serialNumber: '',\r\n        image: null,\r\n        removeImage: false,\r\n        description: '',\r\n        itemLocationId: null,\r\n        itemConditionId: null,\r\n        weight: ''\r\n    });\r\n\r\n    const [addNewItemLocation, setAddNewItemLocation] = useState(false);\r\n    const [addNewLocationLevel, setAddNewLocationLevel] = useState(false);\r\n    const [itemLocationSelectItems, setItemLocationSelectItems] = useState([]);\r\n\r\n    const [addNewItemCondition, setAddNewItemCondition] = useState(false);\r\n    const [itemConditionSelectItems, setItemConditionSelectItems] = useState(\r\n        []\r\n    );\r\n\r\n    const [previewImageSrc, setPreviewImageSrc] = useState(null);\r\n    const [fileName, setFileName] = useState('');\r\n\r\n    const fileRef = useRef();\r\n\r\n    useEffect(() => {\r\n        function mapItemLocations() {\r\n            setItemLocationSelectItems(\r\n                itemLocations.map(x => mapItemClassifierToSelectItem(x, 'name'))\r\n            );\r\n        }\r\n\r\n        if (!itemLocationsLoaded) {\r\n            loadItemLocations().then(mapItemLocations);\r\n        } else {\r\n            mapItemLocations();\r\n        }\r\n    }, [itemLocations, loadItemLocations, itemLocationsLoaded]);\r\n\r\n    useEffect(() => {\r\n        function mapItemConditions() {\r\n            setItemConditionSelectItems([\r\n                { key: 0, value: null, text: '---vali---' },\r\n                ...itemConditions.map(x =>\r\n                    mapItemClassifierToSelectItem(x, 'condition')\r\n                )\r\n            ]);\r\n        }\r\n\r\n        if (!itemConditionsLoaded) {\r\n            loadItemConditions().then(mapItemConditions);\r\n        } else {\r\n            mapItemConditions();\r\n        }\r\n    }, [itemConditions, loadItemConditions, itemConditionsLoaded]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            if (!selectedItem || selectedItem.id !== Number(id)) {\r\n                loadSelectedItem(id);\r\n            } else {\r\n                setItem({\r\n                    name: selectedItem.name,\r\n                    serialNumber: selectedItem.serialNumber,\r\n                    image: null,\r\n                    removeImage: false,\r\n                    description: selectedItem.description,\r\n                    itemLocationId: selectedItem.itemLocation?.id,\r\n                    itemConditionId: selectedItem.itemCondition?.id,\r\n                    weight: selectedItem.weight\r\n                });\r\n                const { imageDto } = selectedItem;\r\n                if (!!imageDto) {\r\n                    setPreviewImageSrc(\r\n                        base64ImageStringToImageSrc(\r\n                            imageDto.base64Image,\r\n                            imageDto.mimeType\r\n                        )\r\n                    );\r\n                    setFileName(imageDto.fileName);\r\n                }\r\n            }\r\n        } else {\r\n            setItem({\r\n                name: '',\r\n                serialNumber: '',\r\n                image: null,\r\n                removeImage: false,\r\n                description: '',\r\n                itemLocationId: null,\r\n                itemConditionId: null,\r\n                weight: ''\r\n            });\r\n            setPreviewImageSrc(null);\r\n            setFileName(null);\r\n        }\r\n    }, [id, selectedItem, loadSelectedItem]);\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: item,\r\n        onSubmit: async values => {\r\n            const weight = values.weight;\r\n            const dto = {\r\n                ...values,\r\n                weight: weight?.toString()?.replace('.', ',')\r\n            };\r\n\r\n            if (id) {\r\n                await updateItem(id, dto);\r\n                history.push(`/details/${id}`);\r\n            } else {\r\n                const itemDto = await createItem(dto);\r\n                history.push(`/details/${itemDto.id}`);\r\n            }\r\n        },\r\n        validationSchema: yup.object({\r\n            name: yup.string().required('Nimi on kohustuslik'),\r\n            itemLocationId: yup.number().typeError('Asukoht on kohustuslik')\r\n        })\r\n    });\r\n\r\n    function handleNewLocationAdded(addedItemLocation) {\r\n        formik.setFieldValue('itemLocationId', addedItemLocation.id);\r\n        setAddNewItemLocation(false);\r\n        setAddNewLocationLevel(true);\r\n    }\r\n\r\n    function handleNewLocationFormClosed() {\r\n        setAddNewItemLocation(false);\r\n        setAddNewLocationLevel(false);\r\n    }\r\n\r\n    function handleNewConditionAdded(addedCondition) {\r\n        setItemConditionSelectItems([\r\n            ...itemConditionSelectItems,\r\n            mapItemClassifierToSelectItem(addedCondition, 'condition')\r\n        ]);\r\n\r\n        formik.setFieldValue('itemConditionId', addedCondition.id);\r\n        setAddNewItemCondition(false);\r\n    }\r\n\r\n    function handleFile(event) {\r\n        const file = !!event.target.files && event.target.files[0];\r\n        if (!file) {\r\n            return;\r\n        }\r\n        setPreviewImageSrc(URL.createObjectURL(file));\r\n        setFileName(file.name);\r\n        formik.setFieldValue('image', file);\r\n        formik.setFieldValue('removeImage', false);\r\n    }\r\n\r\n    function removeImage() {\r\n        setPreviewImageSrc(null);\r\n        setFileName(null);\r\n        formik.setFieldValue('image', null);\r\n        formik.setFieldValue('removeImage', true);\r\n        fileRef.current.value = null;\r\n    }\r\n\r\n    return (\r\n        <Grid centered>\r\n            <Grid.Column tablet=\"16\" computer=\"8\">\r\n                <Segment>\r\n                    <Form\r\n                        onSubmit={formik.handleSubmit}\r\n                        loading={formik.isSubmitting}\r\n                    >\r\n                        <Form.Input\r\n                            name=\"name\"\r\n                            label=\"Nimetus\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.name}\r\n                            error={getFormikErrors(formik, 'name')}\r\n                        />\r\n                        <Form.Input\r\n                            name=\"serialNumber\"\r\n                            label=\"Seerianumber\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.serialNumber}\r\n                            error={getFormikErrors(formik, 'serialNumber')}\r\n                        />\r\n                        <Form.TextArea\r\n                            name=\"description\"\r\n                            label=\"Kirjeldus\"\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.description}\r\n                            error={getFormikErrors(formik, 'description')}\r\n                        />\r\n                        <Form.Input\r\n                            name=\"weight\"\r\n                            label=\"Kaal (kg)\"\r\n                            onKeyPress={handleFloatKeyPress}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.weight}\r\n                            error={getFormikErrors(formik, 'weight')}\r\n                        />\r\n\r\n                        <Grid style={{ marginBottom: '.5em' }}>\r\n                            <Grid.Row>\r\n                                <Grid.Column width=\"10\">\r\n                                    <Form.Select\r\n                                        name=\"itemConditionId\"\r\n                                        label=\"Vali seisukord\"\r\n                                        placeholder=\"Vali seisukord...\"\r\n                                        options={itemConditionSelectItems}\r\n                                        value={formik.values.itemConditionId}\r\n                                        onChange={(_, { value }) => {\r\n                                            formik.setFieldValue(\r\n                                                'itemConditionId',\r\n                                                value\r\n                                            );\r\n                                        }}\r\n                                    />\r\n                                </Grid.Column>\r\n                                <Grid.Column width=\"6\">\r\n                                    <Button\r\n                                        style={{ marginTop: '23px' }}\r\n                                        color={\r\n                                            addNewItemCondition ? 'red' : 'teal'\r\n                                        }\r\n                                        type=\"button\"\r\n                                        content={\r\n                                            addNewItemCondition\r\n                                                ? 'Tühista'\r\n                                                : 'Lisa uus seisukord'\r\n                                        }\r\n                                        onClick={() =>\r\n                                            setAddNewItemCondition(\r\n                                                !addNewItemCondition\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                        {addNewItemCondition && (\r\n                            <ItemConditionForm\r\n                                handleAfterSubmit={handleNewConditionAdded}\r\n                            />\r\n                        )}\r\n\r\n                        <Form.Select\r\n                            name=\"itemLocationId\"\r\n                            label=\"Vali asukoht\"\r\n                            placeholder=\"Vali asukoht...\"\r\n                            options={itemLocationSelectItems}\r\n                            value={formik.values.itemLocationId}\r\n                            onChange={(_, { value }) => {\r\n                                formik.setFieldValue('itemLocationId', value);\r\n                            }}\r\n                            error={getFormikErrors(formik, 'itemLocationId')}\r\n                        />\r\n                        {!addNewLocationLevel && formik.values.itemLocationId && (\r\n                            <Button\r\n                                color=\"teal\"\r\n                                type=\"button\"\r\n                                content=\"Lisa uus tase\"\r\n                                onClick={() => {\r\n                                    setAddNewLocationLevel(true);\r\n                                    setAddNewItemLocation(false);\r\n                                }}\r\n                            />\r\n                        )}\r\n                        {!addNewItemLocation && (\r\n                            <Button\r\n                                color=\"teal\"\r\n                                type=\"button\"\r\n                                content=\"Lisa uus asukoht\"\r\n                                onClick={() => {\r\n                                    setAddNewItemLocation(true);\r\n                                    setAddNewLocationLevel(false);\r\n                                }}\r\n                            />\r\n                        )}\r\n                        {(addNewItemLocation || addNewLocationLevel) && (\r\n                            <ItemLocationForm\r\n                                handleAfterSubmit={handleNewLocationAdded}\r\n                                handleCloseForm={handleNewLocationFormClosed}\r\n                                itemLocation={getItemLocation(\r\n                                    formik.values.itemLocationId\r\n                                )}\r\n                                isLevelAdding={addNewLocationLevel}\r\n                            />\r\n                        )}\r\n\r\n                        <div style={{ marginTop: '3em' }}>\r\n                            {fileName && (\r\n                                <Grid>\r\n                                    <Grid.Row>\r\n                                        <Grid.Column width=\"10\">\r\n                                            <Image\r\n                                                centered\r\n                                                src={previewImageSrc}\r\n                                                size=\"small\"\r\n                                            />\r\n                                        </Grid.Column>\r\n                                        <Grid.Column width=\"6\">\r\n                                            {fileName && (\r\n                                                <Button\r\n                                                    icon\r\n                                                    type=\"button\"\r\n                                                    onClick={removeImage}\r\n                                                    color=\"red\"\r\n                                                    size=\"tiny\"\r\n                                                >\r\n                                                    <Icon name=\"trash\" />\r\n                                                </Button>\r\n                                            )}\r\n                                        </Grid.Column>\r\n                                    </Grid.Row>\r\n                                </Grid>\r\n                            )}\r\n                            <Grid>\r\n                                <Grid.Row>\r\n                                    <Grid.Column width=\"8\">\r\n                                        <Button\r\n                                            floated=\"left\"\r\n                                            type=\"button\"\r\n                                            content=\"Lisa pilt\"\r\n                                            icon=\"file\"\r\n                                            onClick={() =>\r\n                                                fileRef.current.click()\r\n                                            }\r\n                                        />\r\n                                        <Grid.Column />\r\n                                        <Grid.Column width=\"8\">\r\n                                            {fileName && (\r\n                                                <span>{fileName}</span>\r\n                                            )}\r\n                                        </Grid.Column>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                            <input\r\n                                hidden\r\n                                ref={fileRef}\r\n                                type=\"file\"\r\n                                onChange={handleFile}\r\n                            />\r\n                        </div>\r\n\r\n                        <div style={{ marginTop: '2em' }}>\r\n                            <Button type=\"submit\" positive content=\"Salvesta\" />\r\n                            <Button\r\n                                content=\"Tagasi\"\r\n                                type=\"button\"\r\n                                as={Link}\r\n                                to={id ? `/details/${id}` : '/items'}\r\n                            />\r\n                        </div>\r\n                    </Form>\r\n                </Segment>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Button, Header, Item, List, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from '../../stores/store';\r\nimport { base64ImageStringToImageSrc } from '../../utils';\r\nimport LoadingComponent from '../../components/LoadingComponent';\r\n\r\nexport default observer(function ItemFilter() {\r\n    const { id } = useParams();\r\n    const {\r\n        inventoryStore: { selectedItem, loadSelectedItem, itemLoading }\r\n    } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (!selectedItem || selectedItem.id !== Number(id))\r\n            loadSelectedItem(id);\r\n    }, [id, loadSelectedItem, selectedItem]);\r\n\r\n    if (itemLoading || !selectedItem) {\r\n        return <LoadingComponent />;\r\n    }\r\n    return (\r\n        <Segment>\r\n            <Item.Group>\r\n                <Item>\r\n                    {selectedItem.imageDto && (\r\n                        <Item.Image\r\n                            size=\"medium\"\r\n                            src={base64ImageStringToImageSrc(\r\n                                selectedItem.imageDto.base64Image,\r\n                                selectedItem.imageDto.mimeType\r\n                            )}\r\n                        />\r\n                    )}\r\n                    <Item.Content>\r\n                        <Item.Header>{selectedItem.name}</Item.Header>\r\n                        <List>\r\n                            <List.Item>\r\n                                <List.Content>\r\n                                    Asukoht: {selectedItem.itemLocation.name}\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Content>\r\n                                    Seerianumber: {selectedItem.serialNumber}\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Content>\r\n                                    Kaal:{' '}\r\n                                    {selectedItem.weight\r\n                                        ? `${selectedItem.weight} kg`\r\n                                        : ''}\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Content>\r\n                                    Seisukord:{' '}\r\n                                    {selectedItem.itemCondition?.condition}\r\n                                </List.Content>\r\n                            </List.Item>\r\n                        </List>\r\n                        <Item.Description>\r\n                            <Header as=\"h4\">Kirjeldus: </Header>\r\n                            {selectedItem.description}\r\n                        </Item.Description>\r\n                        <div style={{ marginTop: '1em' }}>\r\n                            <Button\r\n                                content=\"Muuda\"\r\n                                as={Link}\r\n                                to={`/edit-item/${selectedItem.id}`}\r\n                            />\r\n                            <Button content=\"Tagasi\" as={Link} to=\"/items\" />\r\n                        </div>\r\n                    </Item.Content>\r\n                </Item>\r\n            </Item.Group>\r\n        </Segment>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Redirect, Route } from 'react-router';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function UserRote({ component: Component, ...rest }) {\r\n    const {\r\n        userStore: { isRegularUser }\r\n    } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                isRegularUser ? <Component {...props} /> : <Redirect to=\"/\" />\r\n            }\r\n        />\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Redirect, Route } from 'react-router';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function AdminRoute({ component: Component, ...rest }) {\r\n    const {\r\n        userStore: { isAdmin }\r\n    } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                isAdmin ? <Component {...props} /> : <Redirect to=\"/\" />\r\n            }\r\n        />\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Grid, Table } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../components/LoadingComponent';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function UserTotalItems() {\r\n    const {\r\n        adminStore: { userTotalItems, loading, loadUserTotalItems }\r\n    } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserTotalItems();\r\n    }, [loadUserTotalItems]);\r\n\r\n    if (loading) {\r\n        return <LoadingComponent />;\r\n    }\r\n\r\n    return (\r\n        <Grid centered>\r\n            <Grid.Column computer=\"8\" tablet=\"16\">\r\n                <Table celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Kasutaja</Table.HeaderCell>\r\n                            <Table.HeaderCell>Esemete kogus</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {userTotalItems.map(userTotalItem => (\r\n                            <Table.Row key={userTotalItem.userName}>\r\n                                <Table.Cell>\r\n                                    {userTotalItem.userName}\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    {userTotalItem.itemCount}\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Grid, Table } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../components/LoadingComponent';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function UserTotalLocations() {\r\n    const {\r\n        adminStore: { userTotalLocations, loading, loadUserTotalLocations }\r\n    } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserTotalLocations();\r\n    }, [loadUserTotalLocations]);\r\n\r\n    if (loading) {\r\n        return <LoadingComponent />;\r\n    }\r\n\r\n    return (\r\n        <Grid centered>\r\n            <Grid.Column computer=\"8\" tablet=\"16\">\r\n                <Table celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Kasutaja</Table.HeaderCell>\r\n                            <Table.HeaderCell>Asukohtade arv</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {userTotalLocations.map(userTotalLocation => (\r\n                            <Table.Row key={userTotalLocation.userName}>\r\n                                <Table.Cell>\r\n                                    {userTotalLocation.userName}\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    {userTotalLocation.locationCount}\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Grid, Table } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../components/LoadingComponent';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function UserItemsTotalWeight() {\r\n    const {\r\n        adminStore: { userItemsTotalWeight, loading, loadUserItemsTotalWeight }\r\n    } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserItemsTotalWeight();\r\n    }, [loadUserItemsTotalWeight]);\r\n\r\n    if (loading) {\r\n        return <LoadingComponent />;\r\n    }\r\n\r\n    return (\r\n        <Grid centered>\r\n            <Grid.Column computer=\"8\" tablet=\"16\">\r\n                <Table celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Kasutaja</Table.HeaderCell>\r\n                            <Table.HeaderCell>Asjade kogukaal</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {userItemsTotalWeight.map(userItemTotalWeight => (\r\n                            <Table.Row key={userItemTotalWeight.userName}>\r\n                                <Table.Cell>\r\n                                    {userItemTotalWeight.userName}\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    {userItemTotalWeight.weight} kg\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Grid, Table } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../components/LoadingComponent';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function UserTotalItemsWithImagesCount() {\r\n    const {\r\n        adminStore: {\r\n            userTotalItemsWithImagesCount,\r\n            loading,\r\n            loadUserTotalItemsWithImagesCount\r\n        }\r\n    } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserTotalItemsWithImagesCount();\r\n    }, [loadUserTotalItemsWithImagesCount]);\r\n\r\n    if (loading) {\r\n        return <LoadingComponent />;\r\n    }\r\n\r\n    return (\r\n        <Grid centered>\r\n            <Grid.Column computer=\"8\" tablet=\"16\">\r\n                <Table celled>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Kasutaja</Table.HeaderCell>\r\n                            <Table.HeaderCell>\r\n                                Esemete arv millel on pilt\r\n                            </Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {userTotalItemsWithImagesCount.map(\r\n                            userItemImagesCount => (\r\n                                <Table.Row key={userItemImagesCount.userName}>\r\n                                    <Table.Cell>\r\n                                        {userItemImagesCount.userName}\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        {userItemImagesCount.imageCount}\r\n                                    </Table.Cell>\r\n                                </Table.Row>\r\n                            )\r\n                        )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useState } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport UserTotalItems from './UserTotalItems';\r\nimport UserTotalLocations from './UserTotalLocations';\r\nimport UserItemsTotalWeight from './UserItemsTotalWeight';\r\nimport UserTotalItemsWithImages from './UserTotalItemsWithImagesCount';\r\n\r\nconst userTotalItemsMenu = 'userTotalItems';\r\nconst userTotalLocationsMenu = 'userTotalLocations';\r\nconst userItemsTotalWeight = 'userItemsTotalWeight';\r\nconst userTotalItemsWithImagesCount = 'userTotalItemsWithImagesCount';\r\n\r\nexport default observer(function AdminDashboard() {\r\n    const [activeMenu, setActiveMenu] = useState(userTotalItemsMenu);\r\n\r\n    return (\r\n        <>\r\n            <Menu pointing secondary>\r\n                <Menu.Item\r\n                    name=\"Kasutaja esemete kogus\"\r\n                    active={activeMenu === userTotalItemsMenu}\r\n                    onClick={() => setActiveMenu(userTotalItemsMenu)}\r\n                />\r\n                <Menu.Item\r\n                    name=\"Kasutaja lisatud asukohtade arv\"\r\n                    active={activeMenu === userTotalLocationsMenu}\r\n                    onClick={() => setActiveMenu(userTotalLocationsMenu)}\r\n                />\r\n                <Menu.Item\r\n                    name=\"Kasutaja esemete kogu kaal\"\r\n                    active={activeMenu === userItemsTotalWeight}\r\n                    onClick={() => setActiveMenu(userItemsTotalWeight)}\r\n                />\r\n                <Menu.Item\r\n                    name=\"Kasutaja Esemete arv millel on pilt\"\r\n                    active={activeMenu === userTotalItemsWithImagesCount}\r\n                    onClick={() => setActiveMenu(userTotalItemsWithImagesCount)}\r\n                />\r\n            </Menu>\r\n            {activeMenu === userTotalItemsMenu && <UserTotalItems />}\r\n            {activeMenu === userTotalLocationsMenu && <UserTotalLocations />}\r\n            {activeMenu === userItemsTotalWeight && <UserItemsTotalWeight />}\r\n            {activeMenu === userTotalItemsWithImagesCount && (\r\n                <UserTotalItemsWithImages />\r\n            )}\r\n        </>\r\n    );\r\n});\r\n","import { useLocation } from 'react-router';\r\nimport { Header, Segment } from 'semantic-ui-react';\r\n\r\nexport default function ServerError() {\r\n    const location = useLocation();\r\n    const appException = location.state;\r\n\r\n    return (\r\n        <Segment>\r\n            <Header as=\"h3\">\r\n                {appException.statusCode} - {appException.message}\r\n            </Header>\r\n            <code>{appException.details}</code>\r\n        </Segment>\r\n    );\r\n}\r\n","import { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ItemsDashboard from '../features/inventory/ItemsDashboard';\nimport { Route, Switch } from 'react-router';\nimport HomePage from './HomePage';\nimport { useStore } from '../stores/store';\nimport NotFound from './NotFound';\nimport { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../components/LoadingComponent';\nimport ItemForm from '../features/inventory/ItemForm';\nimport ItemDetails from '../features/inventory/ItemDetails';\nimport UserRoute from './UserRoute';\nimport AdminRoute from './AdminRoute';\nimport AdminDashboard from '../features/admin/AdminDashboard';\nimport ServerError from './ServerError';\n\nexport default observer(function App() {\n    const {\n        appStore,\n        userStore: { token, getUser, isLoggedIn }\n    } = useStore();\n\n    useEffect(() => {\n        if (token) {\n            getUser().finally(() => appStore.setAppLoaded());\n        } else {\n            appStore.setAppLoaded();\n        }\n    }, [token, getUser, appStore]);\n\n    if (!appStore.appLoaded) {\n        return <LoadingComponent />;\n    }\n\n    return (\n        <>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <>\n                        {isLoggedIn && <NavBar />}\n                        <Container style={{ marginTop: '7em' }}>\n                            <Switch>\n                                <UserRoute\n                                    path=\"/items\"\n                                    component={ItemsDashboard}\n                                />\n                                <UserRoute\n                                    path=\"/details/:id\"\n                                    component={ItemDetails}\n                                />\n                                <UserRoute\n                                    path={['/add-item', '/edit-item/:id']}\n                                    component={ItemForm}\n                                />\n                                <AdminRoute\n                                    path=\"/admin\"\n                                    component={AdminDashboard}\n                                />\n                                <Route\n                                    path=\"/server-error\"\n                                    component={ServerError}\n                                />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            />\n        </>\n    );\n});\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <App />\n        </Router>\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}